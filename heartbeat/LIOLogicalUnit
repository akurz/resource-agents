#!/bin/bash
#
# LIOLogicalUnit
#
# Description: Resource Agent for highly available LIOLogicalUnits.
#              Requires installed LIO kernel module, utilities and
#              a running LIO target. 
#
# Authors:     Andreas Kurz
#
# Support:     linux-ha@lists.linux-ha.org
# License:     GNU General Public License (GPL)
#
# (c) 2014     hastexo Professional Services GmbH
#
# This resource agent is derived from the iSCSILogicalUnit resource
# agent, which itself is made available to the public under the
# following copyright:
#
# (c) 2013	LINBIT, Lars Ellenberg
# (c) 2009-2010 Florian Haas, Dejan Muhamedagic,
#               and Linux-HA contributors
#
# See usage() function below for more details ...
#
#######################################################################
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
# Set the iSCSI fabric as default 
OCF_RESKEY_fabric_default="iscsi"
: ${OCF_RESKEY_fabric=${OCF_RESKEY_fabric_default}}


# Use a SCSI SN that is unique across the cluster,
# and persistent in the event of resource migration.
# To have a reasonably unique default SCSI SN, use the first 8 bytes
# of an MD5 hash of of $OCF_RESOURCE_INSTANCE
sn=`echo -n "${OCF_RESOURCE_INSTANCE}" | openssl md5 | sed -e 's/(stdin)= //'`
OCF_RESKEY_scsi_sn_default=${sn:0:8}
: ${OCF_RESKEY_scsi_sn=${OCF_RESKEY_scsi_sn_default}}
# set 0 as a default value for lio iblock device number
OCF_RESKEY_lio_iblock_default=0
OCF_RESKEY_lio_iblock=${OCF_RESKEY_lio_iblock:-$OCF_RESKEY_lio_iblock_default}

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="LIOLogicalUnit" version="0.1">
<version>0.1</version>

<longdesc lang="en">
Manages a Logical Unit for a LIO target. An Logical unit is a subdivision of 
a Target, exported via a daemon that speaks a specific protocol.
</longdesc>
<shortdesc lang="en">Manages Logical Units (LUs) for LIO targets</shortdesc>

<parameters>
<parameter name="fabric" required="0" unique="0">
<longdesc lang="en">
The LIO target supports several fabric types. Must be one of "iscsi" or
"qla2xxx". If unspecified, "iscsi" is used.
</longdesc>
<shortdesc lang="en">The type of fabric</shortdesc>
<content type="string" default="${OCF_RESKEY_fabric_default}"/>
</parameter>

<parameter name="target_id" required="1" unique="0">
<longdesc lang="en">
The target this Logical Unit belongs to. For an iSCSI target this has to
target iSCSI Qualified Name (IQN). Fibre Channel (qla2xxx) targets use
a World Wide Name (WWN) for identification.
</longdesc>
<shortdesc lang="en">Target identifier</shortdesc>
<content type="string" />
</parameter>

<parameter name="lun" required="1" unique="0">
<longdesc lang="en">
The Logical Unit number (LUN) exposed to initiators.
</longdesc>
<shortdesc lang="en">Logical Unit number (LUN)</shortdesc>
<content type="integer" />
</parameter>

<parameter name="path" required="1" unique="0">
<longdesc lang="en">
The path to the block device exposed. Some fabrics allow this
to be a regular file, too.
</longdesc>
<shortdesc lang="en">Block device (or file) path</shortdesc>
<content type="string" />
</parameter>

<parameter name="scsi_sn" required="0" unique="1">
<longdesc lang="en">
The SCSI serial number to be configured for this Logical Unit.
The default is a hash of the resource name, truncated to 8 bytes.
</longdesc>
<shortdesc lang="en">SCSI serial number</shortdesc>
<content type="string" default="${OCF_RESKEY_scsi_sn_default}"/>
</parameter>

<parameter name="product_id" required="0" unique="0">
<longdesc lang="en">
The SCSI product ID to be configured for this Logical Unit.
</longdesc>
<shortdesc lang="en">SCSI product ID</shortdesc>
<content type="string" />
</parameter>

<parameter name="additional_parameters" required="0" unique="0">
<longdesc lang="en">
Additional LU parameters. A space-separated list of "name=value" pairs
which will be passed through to the targets management
interface. The supported parameters are fabric
dependent. Neither the name nor the value may contain whitespace.
</longdesc>
<shortdesc lang="en">List of LU parameters</shortdesc>
<content type="string" />
</parameter>

<parameter name="allowed_initiators" required="0" unique="0">
<longdesc lang="en">
Allowed initiators. A space-separated list of initiators allowed to
connect to this lun. Initiators may be listed in any syntax
the target fabric allows. If this parameter is empty or
not set, access to this lun will not be allowed from any initiator,
if target is not in demo mode.
</longdesc>
<shortdesc lang="en">List of initiators allowed to connect
to this lun.</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="lio_iblock" required="0" unique="0">
<longdesc lang="en">
LIO iblock device name, a number starting from 0.

Using distinct values here avoids a warning in LIO "LEGACY: SHARED HBA";
and it is necessary when using multiple LUNs started at the same time
(eg. on node failover) to prevent a race condition in tcm_core on mkdir()
in /sys/kernel/config/target/core/.
</longdesc>
<shortdesc lang="en">LIO iblock device number</shortdesc>
<content type="integer" default="0"/>
</parameter>

</parameters>

<actions>
<action name="start"        timeout="10" />
<action name="stop"         timeout="10" />
<action name="reload"       timeout="10" />
<action name="status"       timeout="10" interval="10" depth="0" />
<action name="monitor"      timeout="10" interval="10" depth="0" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="10" />
</actions>
</resource-agent>
END
}

#######################################################################

LIOLogicalUnit_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|reload|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

LIOLogicalUnit_acls() {
    declare -a acls_del
    local acls_del
    local acl_full_path
    local acls_path

    acls_path="/sys/kernel/config/target/${OCF_RESKEY_fabric}/${OCF_RESKEY_target_id}/tpgt_1/acls"
    # Get all existing acls for this LUN, fill it in an array.
    acls_del=( $(ls -1d ${acls_path}/*/lun_${OCF_RESKEY_lun} 2>/dev/null | tr '\n' ' ') )

    # Only need to add acls on start,monitor or reload
    case $__OCF_ACTION in
        monitor|start|reload)
            # Add LUN acl if not already set
            ocf_log debug "Updating allowed initiators for LUN ${OCF_RESKEY_lun}"
            for initiator in $(echo ${OCF_RESKEY_allowed_initiators} | tr '[:upper:]' '[:lower:]'); do
                acl_full_path="${acls_path}/${initiator}/lun_${OCF_RESKEY_lun}"
                # Is the acl already in place?
                if [[ ! -d "${acl_full_path}" ]]; then
                    # What "lio_node --addlunacl" does
                    # for iSCSI works also for qla2xxx
                    mkdir -p ${acl_full_path} && \
                    ln -sf ${acls_path}/../lun/lun_${OCF_RESKEY_lun} \
                    ${acl_full_path}/lun_${OCF_RESKEY_lun} || exit $OCF_ERR_GENERIC
                fi
                # Remove valid acls from "clean-them-up"-array.
                for index in ${!acls_del[@]}; do
                    if [ "${acls_del[$index]}" = "$acl_full_path" ]; then
			unset acls_del[$index]
                        break
                    fi
                done
            done
        ;;
    esac
    # Check if there is an acl for the current LUN, that is
    # not allowed. On "stop" all acls are deleted for this LUN.
    ocf_log debug "Cleanup acls for LUN ${OCF_RESKEY_lun}"
    for acl in ${acls_del[@]}; do
        if [[ -d $acl ]]; then
            # Removing the lun subdir, has the same effect
            # as lio_node --dellunacl.
            case ${OCF_RESKEY_fabric} in
                iscsi)
                    rm -f ${acl}/lio_lun && rmdir ${acl}  || exit $OCF_ERR_GENERIC
                    ;;
                qla2xxx)
                    rm -f ${acl}/lun_${OCF_RESKEY_lun} && rmdir ${acl}  || exit $OCF_ERR_GENERIC
                    ;;
            esac
        fi
        # Delete node-acl if no more lun assignments are remaining
        acl_node="${acl%/*}"
        if ! ls -dU ${acl_node}/lun_* >/dev/null 2>&1 ; then
            ocf_log debug "No more lun acls for initiator ${acl_node##*/}, delete node acl"
            rmdir ${acl_node}  || exit $OCF_ERR_GENERIC
        fi
    done

    return $OCF_SUCCESS
}

LIOLogicalUnit_start() {
    LIOLogicalUnit_monitor
    if [ $? =  $OCF_SUCCESS ]; then
        # The lun seems to be availaddble, also verify/fix its acls
        LIOLogicalUnit_acls || exit $?
	return $OCF_SUCCESS
    fi

    local params

    case $OCF_RESKEY_fabric in
	iscsi)
	    # For lio, we first have to create a target device, then
	    # add it to the Target Portal Group as an LU.
	    ocf_run tcm_node --createdev=iblock_${OCF_RESKEY_lio_iblock}/${OCF_RESOURCE_INSTANCE} \
		${OCF_RESKEY_path} || exit $OCF_ERR_GENERIC
	    if [ -n "${OCF_RESKEY_scsi_sn}" ]; then
		ocf_run tcm_node --setunitserial=iblock_${OCF_RESKEY_lio_iblock}/${OCF_RESOURCE_INSTANCE} \
		    ${OCF_RESKEY_scsi_sn} || exit $OCF_ERR_GENERIC
	    fi
	    ocf_run lio_node --addlun=${OCF_RESKEY_target_id} 1 ${OCF_RESKEY_lun} \
		${OCF_RESOURCE_INSTANCE} iblock_${OCF_RESKEY_lio_iblock}/${OCF_RESOURCE_INSTANCE} || exit $OCF_ERR_GENERIC
            if [ -n "${OCF_RESKEY_allowed_initiators}" ]; then
                LIOLogicalUnit_acls || exit $OCF_ERR_GENERIC
            fi
	    ;;
    esac

    return $OCF_SUCCESS
}

LIOLogicalUnit_reload() {
    case $OCF_RESKEY_fabric in
	iscsi)
            LIOLogicalUnit_acls
	    ;;
    esac

    return $OCF_SUCCESS
}

LIOLogicalUnit_stop() {
    LIOLogicalUnit_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	case $OCF_RESKEY_fabric in
	    iscsi)
                LIOLogicalUnit_acls
		ocf_run lio_node --dellun=${OCF_RESKEY_target_id} 1 ${OCF_RESKEY_lun} || exit $OCF_ERR_GENERIC
		ocf_run tcm_node --freedev=iblock_${OCF_RESKEY_lio_iblock}/${OCF_RESOURCE_INSTANCE} || exit $OCF_ERR_GENERIC
	esac
    fi
    
    return $OCF_SUCCESS
}

LIOLogicalUnit_monitor() {
    local cfgfs_path_lun
    local cfgfs_path_core

    case $OCF_RESKEY_fabric in
	iscsi)
	    cfgfs_path_lun="/sys/kernel/config/target/iscsi/${OCF_RESKEY_target_id}/tpgt_1/lun/lun_${OCF_RESKEY_lun}/${OCF_RESOURCE_INSTANCE}/udev_path"
	    cfgfs_path_core="/sys/kernel/config/target/core/iblock_${OCF_RESKEY_lio_iblock}/${OCF_RESOURCE_INSTANCE}/udev_path"
	    [ -e ${cfgfs_path_lun} ]  && [ `cat ${cfgfs_path_lun}` = "${OCF_RESKEY_path}" ]  && \
	    [ -e ${cfgfs_path_core} ] && [ `cat ${cfgfs_path_core}` = "${OCF_RESKEY_path}" ] && \
            return $OCF_SUCCESS
            # Catch the case where either only the lun _or_ the backend
            # device is available (XOR). We already know not both are valid.
            [ -e ${cfgfs_path_lun} ] && [ `cat ${cfgfs_path_lun}` = "${OCF_RESKEY_path}" ] && \
            ocf_log error "Lun ${OCF_RESKEY_lun} configured but backend device iblock_${OCF_RESKEY_lio_iblock} not connected." && \
            return $OCF_ERR_GENERIC
            [ -e ${cfgfs_path_core} ] && [ `cat ${cfgfs_path_core}` = "${OCF_RESKEY_path}" ] && \
            ocf_log error "Backend device iblock_${OCF_RESKEY_lun} configured but lun ${OCF_RESKEY_lun} not connected." && \
            return $OCF_ERR_GENERIC
	    ;;
    esac
    
    return $OCF_NOT_RUNNING
}

LIOLogicalUnit_validate() {
    # Do we have all required variables?
    for var in target_id lun path; do
	param="OCF_RESKEY_${var}"
	if [ -z "${!param}" ]; then
	    ocf_log error "Missing resource parameter \"$var\"!"
	    exit $OCF_ERR_CONFIGURED
	fi
    done

    # Is the configured fabric supported?
    case "$OCF_RESKEY_fabric" in
	"iscsi"|"qla2xxx")
	    ;;
	*)
	    ocf_log error "Unsupported LIO target fabric \"$OCF_RESKEY_fabric\"!"
	    exit $OCF_ERR_CONFIGURED
	    ;;
    esac

    # Do we have any configuration parameters that the current
    # fabric does not support?
    local unsupported_params
    local var
    local envar
    case $OCF_RESKEY_fabric in
	iscsi)
	    unsupported_params=""
	    ;;
    esac
    for var in ${unsupported_params}; do
	envar=OCF_RESKEY_${var}
	defvar=OCF_RESKEY_${var}_default
	if [ -n "${!envar}" ]; then
	    if  [[ "${!envar}" != "${!defvar}" ]];then 
	        case "$__OCF_ACTION" in
                    start|validate-all)
                      ocf_log warn "Configuration parameter \"${var}\"" \
                       "is not supported by LIO's ${OCF_RESKEY_fabric} fabric" \
                       "and will be ignored." ;;
	        esac
	    fi
	fi
    done

    if ! ocf_is_probe; then
    # Do we have all required binaries?
	case $OCF_RESKEY_fabric in
	    iscsi)
		check_binary tcm_node
		check_binary lio_node
		;;
	esac

        # Is the required kernel functionality available?
	case $OCF_RESKEY_fabric in
	    iet)
		[ -d /proc/net/iet ]
		if [ $? -ne 0 ]; then
		    ocf_log err "/proc/net/iet does not exist or is not a directory -- check if required modules are loaded."
		    exit $OCF_ERR_INSTALLED
		fi
		;;
	    tgt)
	        # tgt is userland only
		;;
	esac
    fi

    return $OCF_SUCCESS
}


case $1 in
  meta-data)
	meta_data
	exit $OCF_SUCCESS
	;;
  usage|help)
	LIOLogicalUnit_usage
	exit $OCF_SUCCESS
	;;
esac

# Everything except usage and meta-data must pass the validate test
LIOLogicalUnit_validate

case $__OCF_ACTION in
start)		LIOLogicalUnit_start;;
stop)		LIOLogicalUnit_stop;;
monitor|status)	LIOLogicalUnit_monitor;;
reload)		ocf_log info "Reloading..."
		LIOLogicalUnit_reload
		;;
validate-all)	;;
*)		LIOLogicalUnit_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
