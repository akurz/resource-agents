#!/bin/bash
#
# LIOTarget
#
# Description: Exports and manages LIO targets.
#
# Authors:     Andreas Kurz
#
# Support:     linux-ha@lists.linux-ha.org
# License:     GNU General Public License (GPL)
#
# (c) 2014     hastexo Professional Services GmbH
#
# This resource agent is derived from the iSCSITarget resource
# agent, which itself is made available to the public under the
# following copyright:
#
# (c) 2009-2010 Florian Haas, Dejan Muhamedagic,
#               and Linux-HA contributors
#
# See usage() function below for more details ...
#
#######################################################################
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
# Set the iSCSI fabric as default 
OCF_RESKEY_fabric_default="iscsi"
: ${OCF_RESKEY_fabric=${OCF_RESKEY_fabric_default}}

# Listen on 0.0.0.0:3260 by default
OCF_RESKEY_portals_default="0.0.0.0:3260"
: ${OCF_RESKEY_portals=${OCF_RESKEY_portals_default}}

# Lockfile, used for selecting a target ID
LOCKFILE=${HA_RSCTMP}/LIOTarget-${OCF_RESKEY_fabric}.lock
#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="LIOTarget" version="0.9">
<version>0.9</version>

<longdesc lang="en">
Manages iSCSI targets. An iSCSI target is a collection of SCSI Logical
Units (LUs) exported via a daemon that speaks the iSCSI protocol.
</longdesc>
<shortdesc lang="en">iSCSI target export agent</shortdesc>

<parameters>
<parameter name="implementation" required="0" unique="0">
<longdesc lang="en">
The iSCSI target daemon implementation. Must be one of "iet", "tgt",
or "lio".  If unspecified, an implementation is selected based on the
availability of management utilities, with "iet" being tried first,
then "tgt", then "lio".
</longdesc>
<shortdesc lang="en">Specifies the iSCSI target implementation
("iet", "tgt" or "lio").</shortdesc>
<content type="string" default="${OCF_RESKEY_implementation_default}"/>
</parameter>

<parameter name="iqn" required="1" unique="1">
<longdesc lang="en">
The target iSCSI Qualified Name (IQN). Should follow the conventional
"iqn.yyyy-mm.&lt;reversed domain name&gt;[:identifier]" syntax.
</longdesc>
<shortdesc lang="en">iSCSI target IQN</shortdesc>
<content type="string" />
</parameter>

<parameter name="tid" required="0" unique="1">
<longdesc lang="en">
The iSCSI target ID. Required for tgt.
</longdesc>
<shortdesc lang="en">iSCSI target ID</shortdesc>
<content type="integer" />
</parameter>

<parameter name="portals" required="0" unique="0">
<longdesc lang="en">
iSCSI network portal addresses. Not supported by all
implementations. If unset, the default is to create one portal that
listens on ${OCF_RESKEY_portal_default}.
</longdesc>
<shortdesc lang="en">iSCSI portal addresses</shortdesc>
<content type="string" default="${OCF_RESKEY_portals_default}"/>
</parameter>

<parameter name="allowed_initiators" required="0" unique="0">
<longdesc lang="en">
Allowed initiators. A space-separated list of initiators allowed to
connect to this target. Initiators may be listed in any syntax
the target implementation allows. If this parameter is empty or
not set, access to this target will be allowed from any initiator.
</longdesc>
<shortdesc lang="en">List of iSCSI initiators allowed to connect
to this target</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="incoming_username" required="0" unique="1">
<longdesc lang="en">
A username used for incoming initiator authentication. If unspecified,
allowed initiators will be able to log in without authentication.
This is a unique parameter, as it not allowed to re-use a single
username across multiple target instances.
</longdesc>
<shortdesc lang="en">Incoming account username</shortdesc>
<content type="string"/>
</parameter>

<parameter name="incoming_password" required="0" unique="0">
<longdesc lang="en">
A password used for incoming initiator authentication.
</longdesc>
<shortdesc lang="en">Incoming account password</shortdesc>
<content type="string"/>
</parameter>

<parameter name="additional_parameters" required="0" unique="0">
<longdesc lang="en">
Additional target parameters. A space-separated list of "name=value"
pairs which will be passed through to the iSCSI daemon's management
interface. The supported parameters are implementation
dependent. Neither the name nor the value may contain whitespace.
</longdesc>
<shortdesc lang="en">List of iSCSI target parameters</shortdesc>
<content type="string" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="10" />
<action name="stop"         timeout="10" />
<action name="status"       timeout="10" interval="10" depth="0" />
<action name="monitor"      timeout="10" interval="10" depth="0" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="10" />
</actions>
</resource-agent>
END
}

#######################################################################

LIOTarget_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

LIOTarget_start() {
    LIOTarget_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi

    local param
    local name
    local value
    local initiator
    local portal

    case $OCF_RESKEY_fabric in
	iscsi)
	    # lio distinguishes between targets and target portal
	    # groups (TPGs). We will always create one TPG, with the
	    # number 1. In lio, creating a network portal
	    # automatically creates the corresponding target if it
	    # doesn't already exist.
	    for portal in ${OCF_RESKEY_portals}; do
		ocf_run lio_node --addnp ${OCF_RESKEY_iqn} 1 \
		    ${portal} || exit $OCF_ERR_GENERIC
	    done
	    # in lio, we can set target parameters by manipulating
	    # the appropriate configfs entries
	    for param in ${OCF_RESKEY_additional_parameters}; do
		name=${param%=*}
		value=${param#*=}
		configfs_path="/sys/kernel/config/target/iscsi/${OCF_RESKEY_iqn}/tpgt_1/param/${name}"
		if [ -e ${configfs_path} ]; then
		    echo ${value} > ${configfs_path} || exit $OCF_ERR_GENERIC
		else
		    ocf_log warn "Unsupported iSCSI target parameter ${name}: will be ignored."
		fi
	    done
	    # lio does per-initiator filtering by default. To disable
	    # this, we need to switch the target to "permissive mode".
	    if [ -n "${OCF_RESKEY_allowed_initiators}" ]; then
		for initiator in ${OCF_RESKEY_allowed_initiators}; do
		    ocf_run lio_node --addnodeacl ${OCF_RESKEY_iqn} 1 \
			${initiator} || exit $OCF_ERR_GENERIC
		done
	    else
		ocf_run lio_node --permissive ${OCF_RESKEY_iqn} 1 || exit $OCF_ERR_GENERIC
		# permissive mode enables read-only access by default,
		# so we need to change that to RW to be in line with
		# the other implementations.
		echo 0 > "/sys/kernel/config/target/iscsi/${OCF_RESKEY_iqn}/tpgt_1/attrib/demo_mode_write_protect"
		if [ `cat /sys/kernel/config/target/iscsi/${OCF_RESKEY_iqn}/tpgt_1/attrib/demo_mode_write_protect` -ne 0 ]; then
		    ocf_log err "Failed to disable write protection for target ${OCF_RESKEY_iqn}."
		    exit $OCF_ERR_GENERIC
		fi
	    fi
	    # TODO: add CHAP authentication support when it gets added
	    # back into LIO
	    ocf_run lio_node --disableauth ${OCF_RESKEY_iqn} 1 || exit $OCF_ERR_GENERIC
	    # Finally, we need to enable the target to allow
	    # initiators to connect
	    ocf_run lio_node --enabletpg=${OCF_RESKEY_iqn} 1 || exit $OCF_ERR_GENERIC
	    ;;
    esac

    return $OCF_SUCCESS
}

LIOTarget_stop() {
    LIOTarget_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	local tid
	case $OCF_RESKEY_fabric in
	    iscsi)
		# In lio, removing a target automatically removes all
		# associated TPGs, network portals, and LUNs.
		ocf_run lio_node --deliqn ${OCF_RESKEY_iqn} || exit $OCF_ERR_GENERIC
		;;
	esac
    fi

    return $OCF_SUCCESS
}

LIOTarget_monitor() {
    case $OCF_RESKEY_fabric in
	iscsi)
	    # if we have no configfs entry for the target, it's
	    # definitely stopped
	    [ -d /sys/kernel/config/target/iscsi/${OCF_RESKEY_iqn} ] || return $OCF_NOT_RUNNING
	    # if the target is there, but its TPG is not enabled, then
	    # we also consider it stopped
	    [ `cat /sys/kernel/config/target/iscsi/${OCF_RESKEY_iqn}/tpgt_1/enable` -eq 1 ] || return $OCF_NOT_RUNNING
	    return $OCF_SUCCESS
	    ;;
    esac
    
    return $OCF_NOT_RUNNING
}

LIOTarget_validate() {
    # Do we have all required variables?
    local required_vars
    case $OCF_RESKEY_fabric in
	iscsi)
	    required_vars="iqn tid"
	    ;;
    esac
    for var in ${required_vars}; do
	param="OCF_RESKEY_${var}"
	if [ -z "${!param}" ]; then
	    ocf_log error "Missing resource parameter \"$var\"!"
	    exit $OCF_ERR_CONFIGURED
	fi
    done

    # Is the configured implementation supported?
    case "$OCF_RESKEY_fabric" in
	"iscsi"|"qla2xxx")
	    ;;
	*)
	    ocf_log error "Unsupported LIO fabric type \"$OCF_RESKEY_implementation\"!"
	    exit $OCF_ERR_CONFIGURED
	    ;;
    esac

    # Do we have any configuration parameters that the current
    # implementation does not support?
    local unsupported_params
    local var
    local envar
    case $OCF_RESKEY_fabric in
	iscsi)
	    # TODO: Remove incoming_username and incoming_password
	    # from this check when LIO 3.0 gets CHAP authentication
	    unsupported_params="tid incoming_username incoming_password"
	    ;;
    esac
    for var in ${unsupported_params}; do
	envar=OCF_RESKEY_${var}
	defvar=OCF_RESKEY_${var}_default
	if [ -n "${!envar}" ]; then
            if  [[ "${!envar}" != "${!defvar}" ]];then
                    case "$__OCF_ACTION" in
                        start|validate-all)
                          ocf_log warn "Configuration parameter \"${var}\"" \
                            "is not supported by by the \"${OCF_RESKEY_fabric}\" fabric" \
                            "and will be ignored." ;;
                    esac
            fi
	fi
    done

    if ! ocf_is_probe; then
        # Do we have all required binaries?
	case $OCF_RESKEY_fabric in
	    iscsi|qla2xxx)
		check_binary tcm_node
		check_binary lio_node
		;;
	esac

        # Is the required kernel functionality available?
	case $OCF_RESKEY_fabric in
	    iscsi)
	        # lio needs configfs to be mounted
		if ! grep -Eq "^.*/sys/kernel/config[[:space:]]+configfs" /proc/mounts; then
		    ocf_log err "configfs not mounted at /sys/kernel/config -- check if required modules are loaded."
		    exit $OCF_ERR_INSTALLED
		fi
	        # check for configfs entries created by target_core_mod
		if [ ! -d /sys/kernel/config/target ]; then
		    ocf_log err "/sys/kernel/config/target does not exist or is not a directory -- check if required modules are loaded."
		    exit $OCF_ERR_INSTALLED
		fi
		;;
	esac
    fi

    return $OCF_SUCCESS
}


case $1 in
  meta-data)
	meta_data
	exit $OCF_SUCCESS
	;;
  usage|help)
	LIOTarget_usage
	exit $OCF_SUCCESS
	;;
esac

# Everything except usage and meta-data must pass the validate test
LIOTarget_validate

case $__OCF_ACTION in
start)		LIOTarget_start;;
stop)		LIOTarget_stop;;
monitor|status)	LIOTarget_monitor;;
reload)		ocf_log info "Reloading..."
	        LIOTarget_start
		;;
validate-all)	;;
*)		LIOTarget_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
